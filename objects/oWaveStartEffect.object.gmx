<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//These set the height for the bars - each will be 150px high
topbar = 0;
bottombar = view_hview;

drawWaveText = true;
drawStartText = false
waveTextScale = 10;
startTextScale = 10;

//How long to display the bars for (2 seconds at 60 steps/sec)
alarm[1] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(startTextScale &gt; 1)
{
    alarm[3] = 1;
}
else
{
    //Make own sound for this
    oCam.shake = 15;
    audio_play_sound(sndExplosion, 3, false);
}

drawStartText = true;
drawWaveText = false;
startTextScale -= 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(waveTextScale &gt; 1)
{
    alarm[2] = 1;
}
else
{
    //Make own sound for this
    oCam.shake = 15;
    audio_play_sound(sndExplosion, 3, false);
    alarm[3] = 30;
}

waveTextScale -= 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(topbar != 50)
{
    topbar++;
    bottombar--;
    alarm[1] = 1;
    
}
else
{
    alarm[0] = 120;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This will destroy the bar object when the bars are no longer displayed
if (topbar == 0)
{
    oWaveManager.canSpawn = true;
    instance_destroy();
}

//the bars will revert 1px per step    
topbar--;
bottombar++;
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//top bar:
draw_rectangle_colour(0,0,view_wview,topbar,c_black,c_black,c_black,c_black,0);
   
//bottom bar:
draw_rectangle_colour(0,bottombar,view_wview,view_hview,c_black,c_black,c_black,c_black,0);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fntMainBig);
if(topbar &gt;= 50)
{
    if(waveTextScale &gt;= 10)
    {
        alarm[2] = 1;   
    }
    
    if(drawWaveText)
    {
        if(waveTextScale &gt; 1)
        {
            draw_text_transformed(view_wview / 2, view_hview / 2, "Wave " + string(oWaveManager.currentWave), waveTextScale, waveTextScale, 0);   
        }
        else
        {
            draw_text(view_wview / 2, view_hview / 2, "Wave " + string(oWaveManager.currentWave));
        }    
    }
    
    if(drawStartText)
    {
        if(startTextScale &gt; 1)
        {
            draw_text_transformed(view_wview / 2, view_hview / 2, "Begin", startTextScale, startTextScale, 0);   
        }
        else
        {
            draw_text(view_wview / 2, view_hview / 2, "Begin");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
