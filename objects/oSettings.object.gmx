<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init setting menu
settingMenu[0] = "&lt; Scale: x" + string(oPrefrences.windowScale) + " &gt;";
settingMenu[1] = "&lt; Controls: " + "Classic" + " &gt;";
settingMenu[2] = "Back";

settingMenuPos = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control menu

if(oInputManager.enterMenuKey)
{
    scrSettingMenu();
}

if(oInputManager.leftMenuKey)
{
    
    switch(settingMenuPos)
    {
        case 0:
            oPrefrences.windowScale--;
            scrWindowSetup(oPrefrences.windowScale);
            settingMenu[0] = "&lt; Scale: x" + string(oPrefrences.windowScale) + " &gt;";
            break;
        case 1:
            break;
    }
}

if(oInputManager.rightMenuKey)
{
    switch(settingMenuPos)
    {
        case 0:
            oPrefrences.windowScale++;
            scrWindowSetup(oPrefrences.windowScale);
            settingMenu[0] = "&lt; Scale: x" + string(oPrefrences.windowScale) + " &gt;";
            break;
        case 1:
            break;
    }
}

if(oInputManager.upMenuKey)
{
    if(settingMenuPos &lt;= 0)
    {
        settingMenuPos = array_length_1d(settingMenu) - 1;
    }
    else
    {
        settingMenuPos--;
    }
    show_debug_message(settingMenuPos);
}

if(oInputManager.downMenuKey)
{
    if(settingMenuPos &gt;= array_length_1d(settingMenu) - 1)
    {
        settingMenuPos = 0;
    }
    else
    {
        settingMenuPos++;
    }
    show_debug_message(settingMenuPos);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the main menu

draw_set_font(fntMainBig);
draw_set_color(c_white);
draw_set_halign(fa_middle);

draw_text(view_wport / 2, 32, "Settings");

draw_set_font(fntMain);
for(i = 0; i &lt; array_length_1d(settingMenu); i++)
{
   if(i = settingMenuPos)
   {
        draw_set_color(make_color_rgb(11, 26, 51));
        draw_rectangle(0, (view_hport / 2) - 12 + (i * 15), view_wport, (view_hport / 2) + 3 + (i * 15), false);
        
        draw_set_color(c_white);
        draw_text(view_wport / 2, (view_hport / 2) - 10 + (i * 15), settingMenu[i]);
   }
   else
   {
        draw_text(view_wport / 2, (view_hport / 2) - 10 + (i * 15), settingMenu[i]);
   }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
